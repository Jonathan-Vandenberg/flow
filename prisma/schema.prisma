generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DocStatus {
  PENDING
  COMPLETE
  FAILED
  EXPIRED
}

enum AreaOfExpertise {
  VISA
  CONSULTANCY
  MARKETING
}

enum SubStatus {
  PENDING
  SUBSCRIBED
  EXPIRED
}

enum DirectoryStatus {
  IN_PROGRESS
  COMPLETE
}

enum StudentStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum RequirementStatus {
  NOT_REQUIRED
  REQUIRED
  PROCESSING
  PASSED
  FAILED
}

enum RequirementType {
  COE_ENGLISH
  COE_EDUCATION
  VISA
}

enum Sector {
  VOCATIONAL
  HIGH_EDUCATION
  HIGH_SCHOOL
}

enum Role {
  NORMAL
  ADMIN
  MANAGER
  AGENT
}

enum NotificationType {
  NEW_MESSAGE
  DOCUMENT_ADDED
  DOCUMENT_REVIEWED
  USER_ADDED
  STUDENT_ADDED
  REQUIREMENT_ADDED
  REQUIREMENT_UPDATED
  REQUIREMENT_REMOVED
  STUDENT_REQUIREMENT_ADDED
  STUDENT_REQUIREMENT_UPDATED
  STUDENT_REQUIREMENT_REMOVED
  USER_ADDED_TO_GROUP
  USER_REMOVED_FROM_GROUP
}

model Country {
  id String @id @default(uuid())

  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  users                  User[]
  organisations          Organisation[]
  students               Student[]
  agenciesOnCountries    AgenciesOnCountries[]
  requirementOnCountries RequirementsOnCountries[]
}

model User {
  id        String  @id @default(uuid())
  managerId String?

  email         String           @unique
  firstName     String
  lastName      String
  mobile        String?
  countryId     String?
  imageUrl      String?
  expertiseArea AreaOfExpertise?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @default(now())

  country         Country?      @relation(fields: [countryId], references: [id])
  managedStudents Student[]
  socialMedia     SocialMedia[] @relation("SocialMediaToAgent")

  agenciesOnOrganisations AgenciesOnOrganisations[]
  usersOnOrganisations    UsersOnOrganisations[]
  usersOnAgencies         UsersOnAgencies[]

  groupMembers  GroupMember[]
  groups        Group[]
  messages      Message[]
  deviceToken   DeviceToken[]
  notifications Notification[]
}

model UsersOnOrganisations {
  userId         String
  organisationId String

  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user         User         @relation(fields: [userId], references: [id])
  organisation Organisation @relation(fields: [organisationId], references: [id])

  @@id([userId, organisationId])
}

model UsersOnAgencies {
  userId   String
  agencyId String

  role      Role
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  agency Agency @relation(fields: [agencyId], references: [id])

  @@id([userId, agencyId])
}

model Organisation {
  id        String @id @default(uuid())
  countryId String

  name      String    @unique
  subStatus SubStatus @default(PENDING)
  imageUrl  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  agencies     Agency[]
  students     Student[]
  courses      Course[]
  requirements Requirement[]
  country      Country       @relation(fields: [countryId], references: [id])

  organisationsOnLocations OrganisationsOnLocations[]
  agenciesOnOrganisations  AgenciesOnOrganisations[]
  usersOnOrganisations     UsersOnOrganisations[]
}

model Agency {
  id String @id @default(uuid())

  name                 String
  sector               Sector?
  district             String?
  market               String?
  commissionPercentage Int      @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now())

  organisations           Organisation[]
  contacts                Contact[]
  students                Student[]
  agenciesOnCountries     AgenciesOnCountries[]
  agenciesOnOrganisations AgenciesOnOrganisations[]
  usersOnAgencies         UsersOnAgencies[]
}

model AgenciesOnCountries {
  agencyId  String
  countryId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  country Country @relation(fields: [countryId], references: [id])
  agency  Agency  @relation(fields: [agencyId], references: [id])

  @@id([agencyId, countryId])
}

model AgenciesOnOrganisations {
  agencyId       String
  organisationId String
  managerId      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  organisation Organisation @relation(fields: [organisationId], references: [id])
  agency       Agency       @relation(fields: [agencyId], references: [id])
  user         User         @relation(fields: [managerId], references: [id])

  @@id([agencyId, organisationId])
}

model Requirement {
  id        String            @id @default(uuid())
  name      String?
  details   String
  status    RequirementStatus
  type      RequirementType
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now())

  directory               Directory[]
  exampleImages           ExampleImage[]
  requirementsOnCourses   RequirementsOnCourses[]
  requirementsOnCountries RequirementsOnCountries[]
  organisation            Organisation?             @relation(fields: [organisationId], references: [id])
  organisationId          String?
  student                 Student?                  @relation(fields: [studentId], references: [id])
  studentId               String?
}

model RequirementsOnCountries {
  id            String   @id @default(uuid())
  requirementId String
  countryId     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  requirement Requirement @relation(fields: [requirementId], references: [id])
  country     Country     @relation(fields: [countryId], references: [id])

  @@unique([requirementId, countryId])
}

model RequirementsOnCourses {
  id            String   @id @default(uuid())
  requirementId String
  courseId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  requirement Requirement @relation(fields: [requirementId], references: [id])
  course      Course      @relation(fields: [courseId], references: [id])

  @@unique([requirementId, courseId])
}

model ExampleImage {
  id            String @id @default(uuid())
  requirementId String

  url         String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
  requirement Requirement @relation(fields: [requirementId], references: [id])
}

model OrganisationsOnLocations {
  id             String   @id @default(uuid())
  organisationId String
  location       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  organisation       Organisation       @relation(fields: [organisationId], references: [id])
  coursesOnLocations CourseOnLocation[]
}

model Course {
  id             String @id @default(uuid())
  organisationId String

  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  organisation          Organisation            @relation(fields: [organisationId], references: [id])
  students              Student[]
  coursesOnLocations    CourseOnLocation[]
  RequirementsOnCourses RequirementsOnCourses[]
}

model CourseOnLocation {
  id         String @id @default(uuid())
  courseId   String
  locationId String

  course   Course                   @relation(fields: [courseId], references: [id])
  location OrganisationsOnLocations @relation(fields: [locationId], references: [id])

  @@unique([courseId, locationId])
}

model Task {
  id        String @id @default(uuid())
  managerId String

  name        String
  description String
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  tags        String[]

  documents Document[] @relation("documentToTask")
}

model Contact {
  id       String @id @default(uuid())
  agencyId String

  name      String
  title     String
  email     String
  mobile    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  agency Agency @relation(fields: [agencyId], references: [id])
}

model Student {
  id             String  @id @default(uuid())
  organisationId String
  courseId       String?
  agencyId       String
  agentId        String
  countryId      String?

  name               String?
  age                Int?
  country            String?
  guardianMobile     String?
  guardianEmail      String?
  expAttendDate      DateTime?
  gapYear            Boolean?
  gapYearExplanation String?
  previouslyRejected Boolean?
  status             StudentStatus @default(PENDING)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @default(now())

  agent        User          @relation(fields: [agentId], references: [id])
  course       Course?       @relation(fields: [courseId], references: [id])
  agency       Agency        @relation(fields: [agencyId], references: [id])
  requirements Requirement[]
  directories  Directory[]   @relation("StudentDocsToStudent")
  organisation Organisation  @relation(fields: [organisationId], references: [id])
  Country      Country?      @relation(fields: [countryId], references: [id])
  group        Group?
}

model Document {
  id          String  @id @default(uuid())
  directoryId String
  taskId      String?

  url         String?
  name        String
  description String
  status      DocStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())

  directory Directory @relation(fields: [directoryId], references: [id])
  task      Task?     @relation("documentToTask", fields: [taskId], references: [id])
  messages  Message[]
}

model Directory {
  id            String @id @default(uuid())
  studentId     String
  requirementId String

  status    DirectoryStatus @default(IN_PROGRESS)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now())

  documents   Document[]
  requirement Requirement @relation(fields: [requirementId], references: [id])
  student     Student     @relation("StudentDocsToStudent", fields: [studentId], references: [id])
}

model SocialMedia {
  id             String  @id @default(uuid())
  userId         String
  agentProfileId String?

  platform  String
  username  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user User @relation("SocialMediaToAgent", fields: [userId], references: [id])
}

model Message {
  id         String   @id @default(uuid())
  content    String
  senderId   String
  groupId    String?
  documentId String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  sender   User      @relation(fields: [senderId], references: [id])
  group    Group?    @relation(fields: [groupId], references: [id])
  document Document? @relation(fields: [documentId], references: [id])
}

model Group {
  id        String   @id @default(uuid())
  studentId String?  @unique
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages     Message[]
  groupMembers GroupMember[]
  student      Student?      @relation(fields: [studentId], references: [id])
  user         User?         @relation(fields: [userId], references: [id])
}

model GroupMember {
  userId    String
  groupId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id])

  @@id([userId, groupId])
}

model DeviceToken {
  id        String   @id @default(uuid())
  userId    String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, token])
}

model Notification {
  id     String           @id @default(uuid())
  type   NotificationType
  userId String
  data   Json

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
