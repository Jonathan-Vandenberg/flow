generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DocStatus {
  PENDING
  COMPLETE
  FAILED
  EXPIRED
}

enum AreaOfExpertise {
  VISA
  CONSALTANCY
  MARKETING
}

enum SubStatus {
  PENDING
  SUBSCRIBED
  EXPIRED
}

enum DirectoryStatus {
  IN_PROGRESS
  COMPLETE
}

enum StudentStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum RequirementStatus {
  NOT_REQUIRED
  REQUIRED
  PROCESSING
  PASSED
  FAILED
}

enum RequirementType {
  COE_ENGLISH
  COE_EDUCATION
  VISA
}

enum Sector {
  VOCATIONAL
  HIGH_EDUCATION
  HIGH_SCHOOL
}

enum Role {
  ADMIN
  MANAGER
  AGENT
}

model User {
  id             String  @id @default(uuid())
  agencyId       String?
  managerId      String?
  organisationId String?

  firstName     String
  lastName      String
  email         String
  mobile        String
  role          Role
  imageUrl      String?
  expertiseArea AreaOfExpertise?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @default(now())

  managedStudents Student[]
  managedAgencies Agency[]
  socialMedia     SocialMedia[] @relation("SocialMediaToAgent")
  organisation    Organisation? @relation(fields: [organisationId], references: [id])
}

model Organisation {
  id String @id @default(uuid())

  name      String     @unique
  country   Country
  subStatus SubStatus? @default(PENDING)
  imageUrl  String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())

  users                   User[]
  agencies                Agency[]
  students                Student[]
  courses                 Course[]
  requirements            Requirement[]
  agenciesOnOrganisations AgenciesOnOrganisations[]
}

model Agency {
  id String @id @default(uuid())

  name                 String
  sector               Sector?
  country              Country?
  district             String?
  market               Country?
  commissionPercentage Int      @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  organisation            Organisation[]
  contacts                Contact[]
  user                    User[]
  students                Student[]
  agenciesOnOrganisations AgenciesOnOrganisations[]
}

model AgenciesOnOrganisations {
  agencyId       String
  organisationId String
  managerId      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  organisation Organisation @relation(fields: [organisationId], references: [id])
  agency       Agency       @relation(fields: [agencyId], references: [id])

  @@id([agencyId, organisationId])
}

model Requirement {
  id             String  @id @default(uuid())
  organisationId String
  courseId       String?
  studentId      String?

  name      String?
  details   String
  status    RequirementStatus @default(REQUIRED)
  type      RequirementType
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now())

  student      Student?     @relation(fields: [studentId], references: [id])
  organisation Organisation @relation(fields: [organisationId], references: [id])
  directory    Directory[]
  course       Course?      @relation(fields: [courseId], references: [id])
}

model CourseLocation {
  id       String @id @default(uuid())
  courseId String

  location  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  course Course @relation(fields: [courseId], references: [id])
}

model Task {
  id        String @id @default(uuid())
  managerId String

  name        String
  description String
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  tags        String[]

  documents Document[] @relation("documentToTask")
}

model Contact {
  id       String @id @default(uuid())
  agencyId String

  name      String
  email     String?
  mobile    String?
  position  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  agency Agency @relation(fields: [agencyId], references: [id])
}

model Course {
  id             String @id @default(uuid())
  organisationId String

  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  organisation Organisation     @relation(fields: [organisationId], references: [id])
  locations    CourseLocation[]
  requirements Requirement[]
  Student      Student[]
}

model Student {
  id             String @id @default(uuid())
  organisationId String
  courseId       String
  agencyId       String
  agentId        String

  name               String?
  age                Int?
  country            String?
  guardianMobile     String?
  guardianEmail      String?
  expAttendDate      DateTime?
  gapYear            Boolean?
  gapYearExplanation String?
  previouslyRejected Boolean?
  status             StudentStatus? @default(PENDING)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @default(now())

  user         User          @relation(fields: [agentId], references: [id])
  course       Course        @relation(fields: [courseId], references: [id])
  agency       Agency        @relation(fields: [agencyId], references: [id])
  requirements Requirement[]
  directories  Directory[]   @relation("StudentDocsToStudent")
  organisation Organisation  @relation(fields: [organisationId], references: [id])
}

model Document {
  id          String  @id @default(uuid())
  directoryId String
  taskId      String?

  url         String?
  name        String
  description String
  status      DocStatus? @default(PENDING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())

  directory Directory @relation(fields: [directoryId], references: [id])
  task      Task?     @relation("documentToTask", fields: [taskId], references: [id])
}

model Directory {
  id            String @id @default(uuid())
  studentId     String
  requirementId String

  status    DirectoryStatus? @default(IN_PROGRESS)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now())

  documents   Document[]
  requirement Requirement @relation(fields: [requirementId], references: [id])
  student     Student     @relation("StudentDocsToStudent", fields: [studentId], references: [id])
}

model SocialMedia {
  id             String  @id @default(uuid())
  userId         String
  agentProfileId String?

  platform  String
  username  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user User @relation("SocialMediaToAgent", fields: [userId], references: [id])
}

enum Country {
  AA
  AB
  AC
  AD
  AE
  AF
  AG
  AH
  AI
  AJ
  AK
  AL
  AM
  AN
  AO
  AP
  AQ
  AR
  AS
  AT
  AU
  AV
  AW
  AX
  AY
  AZ
  BA
  BB
  BC
  BD
  BE
  BF
  BG
  BH
  BI
  BJ
  BK
  BL
  BM
  BN
  BO
  BP
  BQ
  BR
  BS
  BT
  BU
  BV
  BW
  BX
  BY
  BZ
  CA
  CB
  CC
  CD
  CE
  CF
  CG
  CH
  CI
  CJ
  CK
  CL
  CM
  CN
  CO
  CP
  CQ
  CR
  CS
  CT
  CU
  CV
  CW
  CX
  CY
  CZ
  DA
  DB
  DC
  DD
  DE
  DF
  DG
  DH
  DI
  DJ
  DK
  DL
  DM
  DN
  DO
  DP
  DQ
  DR
  DS
  DT
  DU
  DV
  DW
  DX
  DY
  DZ
  EA
  EB
  EC
  ED
  EE
  EF
  EG
  EH
  EI
  EJ
  EK
  EL
  EM
  EN
  EO
  EP
  EQ
  ER
  ES
  ET
  EU
  EV
  EW
  EX
  EY
  EZ
  FA
  FB
  FC
  FD
  FE
  FF
  FG
  FH
  FI
  FJ
  FK
  FL
  FM
  FN
  FO
  FP
  FQ
  FR
  FS
  FT
  FU
  FV
  FW
  FX
  FY
  FZ
  GA
  GB
  GC
  GD
  GE
  GF
  GG
  GH
  GI
  GJ
  GK
  GL
  GM
  GN
  GO
  GP
  GQ
  GR
  GS
  GT
  GU
  GV
  GW
  GX
  GY
  GZ
  HA
  HB
  HC
  HD
  HE
  HF
  HG
  HH
  HI
  HJ
  HK
  HL
  HM
  HN
  HO
  HP
  HQ
  HR
  HS
  HT
  HU
  HV
  HW
  HX
  HY
  HZ
  IA
  IB
  IC
  ID
  IE
  IF
  IG
  IH
  II
  IJ
  IK
  IL
  IM
  IN
  IO
  IP
  IQ
  IR
  IS
  IT
  IU
  IV
  IW
  IX
  IY
  IZ
  JA
  JB
  JC
  JD
  JE
  JF
  JG
  JH
  JI
  JJ
  JK
  JL
  JM
  JN
  JO
  JP
  JQ
  JR
  JS
  JT
  JU
  JV
  JW
  JX
  JY
  JZ
  KA
  KB
  KC
  KD
  KE
  KF
  KG
  KH
  KI
  KJ
  KK
  KL
  KM
  KN
  KO
  KP
  KQ
  KR
  KS
  KT
  KU
  KV
  KW
  KX
  KY
  KZ
  LA
  LB
  LC
  LD
  LE
  LF
  LG
  LH
  LI
  LJ
  LK
  LL
  LM
  LN
  LO
  LP
  LQ
  LR
  LS
  LT
  LU
  LV
  LW
  LX
  LY
  LZ
  MA
  MB
  MC
  MD
  ME
  MF
  MG
  MH
  MI
  MJ
  MK
  ML
  MM
  MN
  MO
  MP
  MQ
  MR
  MS
  MT
  MU
  MV
  MW
  MX
  MY
  MZ
  NA
  NB
  NC
  ND
  NE
  NF
  NG
  NH
  NI
  NJ
  NK
  NL
  NM
  NN
  NO
  NP
  NQ
  NR
  NS
  NT
  NU
  NV
  NW
  NX
  NY
  NZ
  OA
  OB
  OC
  OD
  OE
  OF
  OG
  OH
  OI
  OJ
  OK
  OL
  OM
  ON
  OO
  OP
  OQ
  OR
  OS
  OT
  OU
  OV
  OW
  OX
  OY
  OZ
  PA
  PB
  PC
  PD
  PE
  PF
  PG
  PH
  PI
  PJ
  PK
  PL
  PM
  PN
  PO
  PP
  PQ
  PR
  PS
  PT
  PU
  PV
  PW
  PX
  PY
  PZ
  QA
  QB
  QC
  QD
  QE
  QF
  QG
  QH
  QI
  QJ
  QK
  QL
  QM
  QN
  QO
  QP
  QQ
  QR
  QS
  QT
  QU
  QV
  QW
  QX
  QY
  QZ
  RA
  RB
  RC
  RD
  RE
  RF
  RG
  RH
  RI
  RJ
  RK
  RL
  RM
  RN
  RO
  RP
  RQ
  RR
  RS
  RT
  RU
  RV
  RW
  RX
  RY
  RZ
  SA
  SB
  SC
  SD
  SE
  SF
  SG
  SH
  SI
  SJ
  SK
  SL
  SM
  SN
  SO
  SP
  SQ
  SR
  SS
  ST
  SU
  SV
  SW
  SX
  SY
  SZ
  TA
  TB
  TC
  TD
  TE
  TF
  TG
  TH
  TI
  TJ
  TK
  TL
  TM
  TN
  TO
  TP
  TQ
  TR
  TS
  TT
  TU
  TV
  TW
  TX
  TY
  TZ
  UA
  UB
  UC
  UD
  UE
  UF
  UG
  UH
  UI
  UJ
  UK
  UL
  UM
  UN
  UO
  UP
  UQ
  UR
  US
  UT
  UU
  UV
  UW
  UX
  UY
  UZ
  VA
  VB
  VC
  VD
  VE
  VF
  VG
  VH
  VI
  VJ
  VK
  VL
  VM
  VN
  VO
  VP
  VQ
  VR
  VS
  VT
  VU
  VV
  VW
  VX
  VY
  VZ
  WA
  WB
  WC
  WD
  WE
  WF
  WG
  WH
  WI
  WJ
  WK
  WL
  WM
  WN
  WO
  WP
  WQ
  WR
  WS
  WT
  WU
  WV
  WW
  WX
  WY
  WZ
  XA
  XB
  XC
  XD
  XE
  XF
  XG
  XH
  XI
  XJ
  XK
  XL
  XM
  XN
  XO
  XP
  XQ
  XR
  XS
  XT
  XU
  XV
  XW
  XX
  XY
  XZ
  YA
  YB
  YC
  YD
  YE
  YF
  YG
  YH
  YI
  YJ
  YK
  YL
  YM
  YN
  YO
  YP
  YQ
  YR
  YS
  YT
  YU
  YV
  YW
  YX
  YY
  YZ
  ZA
  ZB
  ZC
  ZD
  ZE
  ZF
  ZG
  ZH
  ZI
  ZJ
  ZK
  ZL
  ZM
  ZN
  ZO
  ZP
  ZQ
  ZR
  ZS
  ZT
  ZU
  ZV
  ZW
  ZX
  ZY
  ZZ
}
