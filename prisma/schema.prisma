generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DocStatus {
  PENDING
  COMPLETE
  FAILED
  EXPIRED
}

enum AreaOfExpertise {
  VISA
  CONSALTANCY
  MARKETING
}

enum SubStatus {
  PENDING
  SUBSCRIBED
  EXPIRED
}

enum DirectoryStatus {
  IN_PROGRESS
  COMPLETE
}

enum StudentStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum RequirementStatus {
  NOT_REQUIRED
  REQUIRED
  PROCESSING
  PASSED
  FAILED
}

enum RequirementType {
  COE_ENGLISH
  COE_EDUCATION
  VISA
}

enum Sector {
  VOCATIONAL
  HIGH_EDUCATION
  HIGH_SCHOOL
}

enum Role {
  NORMAL
  ADMIN
  MANAGER
  AGENT
}

model User {
  id             String  @id @default(uuid())
  agencyId       String?
  managerId      String?
  organisationId String?

  email         String           @unique
  firstName     String
  lastName      String
  mobile        String?
  country       String?
  role          Role             @default(NORMAL)
  imageUrl      String?
  expertiseArea AreaOfExpertise?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @default(now())

  managedStudents Student[]
  agency          Agency?       @relation("UserToAgency", fields: [agencyId], references: [id])
  socialMedia     SocialMedia[] @relation("SocialMediaToAgent")
  organisation    Organisation? @relation(fields: [organisationId], references: [id])
}

model Organisation {
  id String @id @default(uuid())

  name      String     @unique
  country   String?
  subStatus SubStatus? @default(PENDING)
  imageUrl  String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())

  users                   User[]
  agencies                Agency[]
  students                Student[]
  courses                 Course[]
  requirements            Requirement[]
  agenciesOnOrganisations AgenciesOnOrganisations[]
}

model Agency {
  id String @id @default(uuid())

  name                 String
  sector               Sector?
  country              String?
  district             String?
  market               String?
  commissionPercentage Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  organisation            Organisation[]
  contacts                Contact[]
  students                Student[]
  agenciesOnOrganisations AgenciesOnOrganisations[]
  users                   User[]                    @relation("UserToAgency")
}

model AgenciesOnOrganisations {
  agencyId       String
  organisationId String
  managerId      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  organisation Organisation @relation(fields: [organisationId], references: [id])
  agency       Agency       @relation(fields: [agencyId], references: [id])

  @@id([agencyId, organisationId])
}

model Requirement {
  id             String  @id @default(uuid())
  organisationId String
  courseId       String?
  studentId      String?

  country   String?
  name      String?
  details   String
  status    RequirementStatus?
  type      RequirementType
  createdAt DateTime           @default(now())
  updatedAt DateTime           @default(now())

  student       Student?       @relation(fields: [studentId], references: [id])
  organisation  Organisation   @relation(fields: [organisationId], references: [id])
  directory     Directory[]
  exampleImages ExampleImage[]
  course        Course?        @relation(fields: [courseId], references: [id])
}

model ExampleImage {
  id            String @id @default(uuid())
  requirementId String

  url         String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
  requirement Requirement @relation(fields: [requirementId], references: [id])
}

model CourseLocation {
  id       String @id @default(uuid())
  courseId String

  location  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  course Course @relation(fields: [courseId], references: [id])
}

model Task {
  id        String @id @default(uuid())
  managerId String

  name        String
  description String
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  tags        String[]

  documents Document[] @relation("documentToTask")
}

model Contact {
  id       String @id @default(uuid())
  agencyId String

  name      String
  email     String?
  mobile    String?
  position  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  agency Agency @relation(fields: [agencyId], references: [id])
}

model Course {
  id             String @id @default(uuid())
  organisationId String

  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  organisation Organisation     @relation(fields: [organisationId], references: [id])
  locations    CourseLocation[]
  requirements Requirement[]
  Student      Student[]
}

model Student {
  id             String @id @default(uuid())
  organisationId String
  courseId       String
  agencyId       String
  agentId        String

  name               String?
  age                Int?
  country            String?
  guardianMobile     String?
  guardianEmail      String?
  expAttendDate      DateTime?
  gapYear            Boolean?
  gapYearExplanation String?
  previouslyRejected Boolean?
  status             StudentStatus? @default(PENDING)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @default(now())

  user         User          @relation(fields: [agentId], references: [id])
  course       Course        @relation(fields: [courseId], references: [id])
  agency       Agency        @relation(fields: [agencyId], references: [id])
  requirements Requirement[]
  directories  Directory[]   @relation("StudentDocsToStudent")
  organisation Organisation  @relation(fields: [organisationId], references: [id])
}

model Document {
  id          String  @id @default(uuid())
  directoryId String
  taskId      String?

  url         String?
  name        String
  description String
  status      DocStatus? @default(PENDING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())

  directory Directory @relation(fields: [directoryId], references: [id])
  task      Task?     @relation("documentToTask", fields: [taskId], references: [id])
}

model Directory {
  id            String @id @default(uuid())
  studentId     String
  requirementId String

  status    DirectoryStatus? @default(IN_PROGRESS)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now())

  documents   Document[]
  requirement Requirement @relation(fields: [requirementId], references: [id])
  student     Student     @relation("StudentDocsToStudent", fields: [studentId], references: [id])
}

model SocialMedia {
  id             String  @id @default(uuid())
  userId         String
  agentProfileId String?

  platform  String
  username  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user User @relation("SocialMediaToAgent", fields: [userId], references: [id])
}
